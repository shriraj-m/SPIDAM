Index: reverb_with_gui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import ttk\r\nfrom tkinter import filedialog as fd\r\nfrom tkinter import messagebox\r\nfrom pydub import AudioSegment\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom scipy.io import wavfile\r\nfrom find_frequency import find_target_frequency\r\nfrom scipy.signal import welch\r\n\r\n# Creating root window\r\nroot = tk.Tk()\r\nroot.title('Select Audio File.')\r\nroot.config(bg=\"skyblue\")\r\nroot.resizable(True, True)\r\nroot.geometry('1280x720')\r\n\r\nheader = tk.Frame(root)\r\nheader.grid(row=0, column=1, padx=10, pady=10)\r\n\r\ncenter_top = tk.Frame(root)\r\ncenter_top.grid(row=1, padx=10, pady=10)\r\n\r\ncenter_bot = tk.Frame(root)\r\ncenter_bot.grid(row=2, padx=10, pady=10)\r\n\r\nfooter = tk.Frame(root)\r\nfooter.grid(row=3, column=1, padx=10, pady=10)\r\n\r\nselected_file = \"\"\r\n\r\n\r\ndef display_audio(path):\r\n    ax1.clear()\r\n\r\n    def define_channel_count():\r\n        if len(data.shape) == 1:\r\n            return 1\r\n        else:\r\n            return data.shape[1]\r\n\r\n    def plot_labeling(channel_count):\r\n        if channel_count == 1:\r\n            ax1.set_title(\"Audio Wavegraph\")\r\n            ax1.set_xlabel(\"Time [s]\")\r\n            ax1.set_ylabel(\"Amplitude\")\r\n            ax1.plot(time, data, label=\"Channel 1\")\r\n            ax1.legend()\r\n\r\n        elif channel_count > 1:\r\n            for x in range(channel_count):\r\n                label_title = f'Channel {x + 1}'\r\n                ax1.set_ylabel(\"Time [s]\")\r\n                ax1.set_ylabel(\"Amplitude\")\r\n                ax1.set_title(\"Audio Wavegraph\")\r\n                ax1.plot(time, data[:, x], label=label_title)\r\n                ax1.legend()\r\n\r\n    # Holds all the possible files for testing and randomly selects a file for testing\r\n    source = path  # when this is a straight string it works but with tkinter gui it breaks\r\n\r\n    # File used to store converted mp3\r\n    destination = \"test.wav\"\r\n\r\n    wav_filename = \"\"\r\n    # Determines if the file is not a wav and does a mp3 to wav conversion\r\n    # Then associates wav_filename with appropriate filename\r\n\r\n    if source.find(\".mp3\") != -1:\r\n        sound = AudioSegment.from_mp3(source)\r\n        sound.export(destination, format=\"wav\")\r\n        wav_filename = destination\r\n    elif source.find(\".wav\") or source.find(\".WAV\") != -1:\r\n        wav_filename = source\r\n    else:\r\n        print(\"uhoh\")\r\n    samplerate, data = wavfile.read(wav_filename)\r\n    if define_channel_count() == 1:\r\n        frequencies, power = welch(data, samplerate, nperseg=4096)\r\n        dominant_frequency = frequencies[np.argmax(power)]\r\n        reso_value = f'Resonance of Selected Graph: {round(dominant_frequency)}Hz.'\r\n        resonance.config(text=reso_value)\r\n    elif define_channel_count() > 1:\r\n        # Only prioritize channel 1\r\n        frequencies, power = welch(data[:, 0], samplerate, nperseg=4096)\r\n        dominant_frequency = frequencies[np.argmax(power)]\r\n        reso_value = f'Resonance of Selected Graph: {round(dominant_frequency)}Hz.'\r\n        resonance.config(text=reso_value)\r\n\r\n    length = data.shape[0] / samplerate\r\n    time_of_file = f'Time (in Seconds) of Selected File: {round(length, 2)}s.'\r\n    time_value.config(text=time_of_file)\r\n\r\n    time = np.linspace(0, length, data.shape[0])\r\n    plot_labeling(define_channel_count())\r\n    canvas1.draw()\r\n\r\n\r\ndef select_file():\r\n    filetypes = (\r\n        ('WAV files', '*.wav'),\r\n        ('WAV files', '*.WAV'),\r\n        ('MP3 files', '*.mp3'),\r\n        ('All Files', '*.*')\r\n    )\r\n\r\n    filename = fd.askopenfilename(\r\n        title='Open a File',\r\n        initialdir='/',\r\n        filetypes=filetypes)\r\n\r\n    # Holds the path of the selected file.\r\n    global selected_file\r\n    selected_file = filename\r\n    print(selected_file)\r\n    file_name.config(text=selected_file)\r\n\r\n    if selected_file.find(\".wav\") == -1 and selected_file.find(\".mp3\") == -1 and selected_file.find(\".WAV\") == -1:\r\n        messagebox.showerror(\"Invalid File Type\", \"Error: The file type selected is not supported\")\r\n    else:\r\n        display_audio(selected_file)\r\n        run(selected_file)\r\n        plot_frequency_band(\"low\")\r\n        plot_frequency_band(\"mid\")\r\n        plot_frequency_band(\"high\")\r\n\r\n\r\ncolors = [\"c\", \"m\", \"b\", \"r\"]\r\n\r\n\r\ndef plot_frequency_band(type_of_freq):\r\n    sample_rate, data = wavfile.read(selected_file)\r\n\r\n    # Perform FFT\r\n    n = len(data)\r\n    fft_result = np.fft.fft(data)\r\n    frequencies = np.fft.fftfreq(n, d=1 / sample_rate)\r\n\r\n    # Define frequency bands\r\n    low_cutoff = 20\r\n    mid_cutoff = 2000\r\n    high_cutoff = 20000\r\n\r\n    # Index of frequency bands\r\n    low_indices = np.where((frequencies >= 0) & (frequencies < low_cutoff))\r\n    mid_indices = np.where((frequencies >= low_cutoff) & (frequencies < mid_cutoff))\r\n    high_indices = np.where((frequencies >= mid_cutoff) & (frequencies < high_cutoff))\r\n\r\n    # Plot selected frequency band\r\n    figure4 = plt.figure(figsize=(8, 4))\r\n    ax4 = figure4.add_subplot(111)\r\n\r\n    if type_of_freq == \"low\":\r\n        ax4.plot(frequencies[low_indices], np.abs(fft_result[low_indices]), label='Low Frequency')\r\n    elif type_of_freq == \"mid\":\r\n        ax4.plot(frequencies[mid_indices], np.abs(fft_result[mid_indices]),  label='Mid Frequency')\r\n    elif type_of_freq == \"high\":\r\n        ax4.plot(frequencies[high_indices], np.abs(fft_result[high_indices]), label='High Frequency')\r\n\r\n    ax4.set_xlabel('Frequency (Hz)')\r\n    ax4.set_ylabel('Amplitude')\r\n    ax4.set_title(f'{type_of_freq} Frequency')\r\n    ax4.legend()\r\n    plt.show()\r\n\r\ndef run(given_file):\r\n    ax2.clear()\r\n    ax3.clear()\r\n    sample_rate, data = wavfile.read(given_file)\r\n    if len(data.shape) == 1:\r\n        ax3.set_title(\"Spectrogram\")\r\n        spectrum, freq, t, im = ax3.specgram(data, Fs=sample_rate, NFFT=1024, cmap=plt.get_cmap('autumn_r'))\r\n        canvas3.draw()\r\n        reverb_implementation(spectrum, freq, t, colors[1], label_value=1)\r\n        canvas2.draw()\r\n\r\n    else:\r\n        channel_count = data.shape[1]\r\n        for x in range(channel_count):\r\n            ax3.set_title(\"Spectrogram\")\r\n            spectrum, freq, t, im = ax3.specgram(data[:, x], Fs=sample_rate, NFFT=1024, cmap=plt.get_cmap('autumn_r'))\r\n            canvas3.draw()  # shows first spectrogram plot.\r\n            label_string = f'Channel {x + 1}'\r\n            reverb_implementation(spectrum, freq, t, colors[x], label_value=label_string)\r\n        canvas2.draw()\r\n\r\n\r\ndef reverb_implementation(spectrum, freq, t, color, label_value):\r\n    def frequency_check():\r\n        # identify a frequency to check\r\n        global target_frequency\r\n        target_frequency = find_target_frequency(freq)\r\n        index_of_frequency = np.where(freq == target_frequency)[0][0]  # find sound data for a particular frequency\r\n        data_for_frequency = spectrum[index_of_frequency]\r\n        # change a digital signal for a values in decibels\r\n        data_in_db_fun = 10 * np.log10(data_for_frequency)\r\n        return data_in_db_fun\r\n\r\n    data_in_db = frequency_check()\r\n    # reverb line\r\n    ax2.set_title(\"Reverb Graph\")\r\n    ax2.plot(t, data_in_db, color=color, linewidth=1, alpha=0.7, label=label_value)\r\n    ax2.set_xlabel(\"Time (s)\")\r\n    ax2.set_ylabel(\"Power (dB)\")\r\n    ax2.legend()\r\n\r\n    # find an index of a max value\r\n    index_of_max = np.argmax(data_in_db)\r\n    value_of_max = data_in_db[index_of_max]\r\n    ax2.plot(t[index_of_max], data_in_db[index_of_max], 'go')\r\n\r\n    # slice our array from a max value\r\n    sliced_array = data_in_db[index_of_max:]\r\n    value_of_max_less_5 = value_of_max - 5\r\n\r\n    # find nearest value of less 5db\r\n    def find_nearest_value(array, value):\r\n        array = np.asarray(array)\r\n        idx = (np.abs(array - value)).argmin()\r\n        return array[idx]\r\n\r\n    value_of_max_less_5 = find_nearest_value(sliced_array, value_of_max_less_5)\r\n    index_of_max_less_5 = np.where(data_in_db == value_of_max_less_5)\r\n    ax2.plot(t[index_of_max_less_5], data_in_db[index_of_max_less_5], 'yo')\r\n\r\n    # slice array from a max -5db\r\n    value_of_max_less_25 = value_of_max - 25\r\n    value_of_max_less_25 = find_nearest_value(sliced_array, value_of_max_less_25)\r\n    index_of_max_less_25 = np.where(data_in_db == value_of_max_less_25)\r\n    ax2.plot(t[index_of_max_less_25], data_in_db[index_of_max_less_25], 'ro')\r\n\r\n    rt20 = (t[index_of_max_less_5] - t[index_of_max_less_25])[0]\r\n    print(f'rt20= {rt20}')\r\n    rt60 = 3 * rt20\r\n    print(f'The RT60 reverb time at freq {int(data_in_db[index_of_max])}Hz is {round(abs(rt60), 2)} seconds')\r\n\r\n\r\n# open button\r\nopen_button = ttk.Button(\r\n    header,\r\n\r\n    text='Open a File',\r\n    command=select_file\r\n)\r\nopen_button.pack(pady=20)\r\n\r\nfile_name = tk.Label(\r\n    header,\r\n    text=selected_file,\r\n    fg='black',\r\n)\r\nfile_name.pack()\r\n\r\ntime_value = tk.Label(\r\n    footer,\r\n    text=\"\",\r\n    fg=\"black\"\r\n)\r\ntime_value.pack()\r\n\r\nresonance = tk.Label(\r\n    footer,\r\n    text=\"\",\r\n    fg=\"black\"\r\n)\r\nresonance.pack()\r\n\r\nexit_button = ttk.Button(\r\n    footer,\r\n    text=\"EXIT\",\r\n    command=root.destroy\r\n)\r\nexit_button.pack()\r\n\r\n# wavegraph section in gui\r\nframe1 = tk.Frame(root)\r\nfigure1 = plt.figure(figsize=(4, 4))\r\nax1 = figure1.add_subplot(111)\r\ncanvas1 = FigureCanvasTkAgg(figure1, frame1)\r\ncanvas1.get_tk_widget().pack()\r\ntoolbar1 = NavigationToolbar2Tk(canvas1, frame1, pack_toolbar=False)\r\ntoolbar1.update()\r\ntoolbar1.pack(anchor=\"w\", fill=tk.X)\r\nframe1.grid(row=1, column=0, padx=5, pady=20)\r\n\r\n# frequency section in gui\r\nframe2 = tk.Frame(root)\r\nfigure2 = plt.figure(figsize=(4, 4))\r\nax2 = figure2.add_subplot(111)\r\ncanvas2 = FigureCanvasTkAgg(figure2, frame2)\r\ncanvas2.get_tk_widget().pack()\r\ntoolbar2 = NavigationToolbar2Tk(canvas2, frame2, pack_toolbar=False)\r\ntoolbar2.update()\r\ntoolbar2.pack(anchor=\"w\", fill=tk.X)\r\nframe2.grid(row=1, column=1, padx=5, pady=20)\r\n\r\n# specgram section in gui\r\nframe3 = tk.Frame(root)\r\nfigure3 = plt.figure(figsize=(4, 4), )\r\nax3 = figure3.add_subplot(111)\r\ncanvas3 = FigureCanvasTkAgg(figure3, frame3)\r\ncanvas3.get_tk_widget().pack()\r\ntoolbar3 = NavigationToolbar2Tk(canvas3, frame3, pack_toolbar=False)\r\ntoolbar3.update()\r\ntoolbar3.pack(anchor=\"w\", fill=tk.X)\r\nframe3.grid(row=1, column=2, padx=5, pady=20)\r\n\r\n# run the application\r\nroot.mainloop()\r\n
===================================================================
diff --git a/reverb_with_gui.py b/reverb_with_gui.py
--- a/reverb_with_gui.py	
+++ b/reverb_with_gui.py	
@@ -65,8 +65,6 @@
     destination = "test.wav"
 
     wav_filename = ""
-    # Determines if the file is not a wav and does a mp3 to wav conversion
-    # Then associates wav_filename with appropriate filename
 
     if source.find(".mp3") != -1:
         sound = AudioSegment.from_mp3(source)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11\" project-jdk-type=\"Python SDK\" />\r\n</project>
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="Black">
+    <option name="sdkName" value="Python 3.9" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
